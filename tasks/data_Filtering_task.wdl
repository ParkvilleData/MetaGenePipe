# Data filtering task
#################
# Trims paired end reads according to user set parameters
# INPUT:
#       - infile: file to reformat
#       - outputPrefix: prefix of the histogram files generated by reformat.sh
#       - overwrite: flag to overwrite the files that already exist
# OUTPUT:
#       - File outFile: reformated input file
#       - File bhistOut: Base composition histogram by position
#       - File qhistOut: Quality histogram by position
#       - File aqhistOut: Histogram of average read quality
#       - File lhistOut: Read length histogram
#       - File gchistOut: Read GC content histogram
#       - Removed overwrite as is redundant
# CHANGES:
#       - Can't find how to set naming convention for unpaired out
#               will use sub to change name
# NOTES:
#	- Currently set to work with gz files only i.e. captured output name
#	- Allow for fastq files as well?
#
#################

task trimmomatic_pe_task {
	Int PET_threads
	Int PET_minutes
	Int PET_mem
	Int minLength
	String Phred
	String EndType
	String outputPrefix
	String truseq_pe_adapter
	File forwardReads
	File reverseReads
	File trimmomatic

	### Note add leading and trailing as input params

	command {
		module load Java

		echo "Trimming sample .";

 		java -jar ${trimmomatic} \
		${EndType} -threads ${PET_threads} -phred${Phred} \
		${forwardReads} ${reverseReads} \
		${outputPrefix}_R1.fwd.fq.gz ${outputPrefix}.fwd.unpaired.fq.gz \
		${outputPrefix}_R2.rev.fq.gz ${outputPrefix}.rev.unpaired.fq.gz \
		ILLUMINACLIP:${truseq_pe_adapter}:2:30:10:2 \
		LEADING:3 TRAILING:3 SLIDINGWINDOW:4:20 MINLEN:${minLength};

		echo ".. Done\n";
	}
	output {
		File outFwdPaired="${outputPrefix}_R1.fwd.fq.gz"
		File outRevPaired="${outputPrefix}_R2.rev.fq.gz"
		File outFwdUnpaired="${outputPrefix}.fwd.unpaired.fq.gz"
		File outRevUnpaired="${outputPrefix}.rev.unpaired.fq.gz"
	}
	runtime {
                runtime_minutes: '${PET_minutes}'
                cpus: '${PET_threads}'
                mem: '${PET_mem}'
        }
	meta {
                author: "Noel Faux"
                email: "nfaux@unimelb.edu.au"
                author: "Bobbie Shaban"
                email: "bshaban@unimelb.edu.au"
                description: "<DESCRIPTION>"
        }
        parameter_meta {
                # Inputs:
                Input1: "itype:<TYPE>: <DESCRIPTION>"
                # Outputs:
                Output1: "otype:<TYPE>: <DESCRIPTION>"
        }
}

#################
# Trimmomatic: Trims SE reads according to user set paramters
# INPUT:
#       - infile: file to reformat
#       - outputPrefix: prefix of the histogram files generated by reformat.sh
#       - overwrite: flag to overwrite the files that already exist
# OUTPUT:
#       - File outFile: reformated input file
#       - File bhistOut: Base composition histogram by position
#       - File qhistOut: Quality histogram by position
#       - File aqhistOut: Histogram of average read quality
#       - File lhistOut: Read length histogram
#       - File gchistOut: Read GC content histogram
#       - Removed overwrite as is redundant
# CHANGES:
#       - Can't find how to set naming convention for unpaired out
#               will use sub to change name
#
#################
task trimmomatic_se_task {
	String EndType
	Int SET_threads
        Int SET_minutes
        Int SET_mem
	Int minLength
	String Phred
	String truseq_se_adapter
	String outputPrefix
	File forwardReads
	File trimmomatic

	command {
		module load Java

		echo "Trimming sample .";

		java -jar ${trimmomatic} ${EndType} -threads ${SET_threads} -phred${Phred} ${outputPrefix}.se.fq.gz ${outputPrefix}.se.unpaired.gz LEADING:3 TRAILING:3 SLIDINGWINDOW:4:20 MINLEN:${minLength};

		echo ".. Done\n";
	}
	output {
		File outSEreads = "${outputPrefix}.se.fq.gz"
		File outSEunpairedReads = " ${outputPrefix}.se.unpaired.gz"
	}
	runtime {
                runtime_minutes: '${SET_minutes}'
                cpus: '${SET_threads}'
                mem: '${SET_mem}'
        }
}

###############################################################################
# Reformat from BBMap for single end
# INPUT:
#	- infile: file to reformat
# 	- outputPrefix: prefix of the histogram files generated by reformat.sh
#	- overwrite: flag to overwrite the files that already exist
# OUTPUT:
# 	- File outFile: reformated input file
#	- File bhistOut: Base composition histogram by position
#	- File qhistOut: Quality histogram by position
#	- File aqhistOut: Histogram of average read quality
#	- File lhistOut: Read length histogram
#	- File gchistOut: Read GC content histogram
#       - Removed overwrite as is redundant
# CHANGES:
#       - Can't find how to set naming convention for unpaired out
#               will use sub to change name
#
###############################################################################
task reformat_se_task {
	Int SER_threads
	Int SER_minutes
	Int SER_mem
	File forwardReads
	String outputPrefix
	String suffix

        command {
                module load BBMap;

                echo "Reformting ${forwardReads} ";
                reformat.sh in=${forwardReads} out1=${outputPrefix}.trimmed.fq.gz qhist=${outputPrefix}.${suffix}_qhist.txt aqhist=${outputPrefix}.${suffix}_aqhist.txt bhist=${outputPrefix}.${suffix}_bhist.txt lhist=${outputPrefix}_${suffix}.lhist.txt gchist=${outputPrefix}.${suffix}_gchist.txt;
		echo ".. Done";
	}
	output {
		File outFqFile = "${outputPrefix}.trimmed.fq.gz"
		Array[File] outHistArray = ["${outputPrefix}.$suffix}_aqhist.txt","${outputPrefix}.${suffix}_bhist.txt","${outputPrefix}.${suffix}_gchist.txt","${outputPrefix}.${suffix}_lhist.txt","${outputPrefix}.${suffix}_qhist.txt"]
		#File forwardUnpaired=sub("output_forward_unpaired.fq.gz", "output_forward_upaired.fq.gz", "${outputPrefix}_unpaired_forward.gz")
	}
	runtime {
                runtime_minutes: '${SER_minutes}'
                cpus: '${SER_threads}'
                mem: '${SER_mem}'
        }
}

###############################################################################
# Reformat from BBMap for paired end
# INPUT:
#	- forwardReads: file to reformat
#	- reverseReads: file to reformat
# 	- outputPrefix: prefix of the histogram files generated by reformat.sh
#	- overwrite: flag to overwrite the files that already exist
# OUTPUT:
# 	- File outFile: reformated input file
#	- File bhistOut: Base composition histogram by position
#	- File qhistOut: Quality histogram by position
#	- File aqhistOut: Histogram of average read quality
#	- File lhistOut: Read length histogram
#	- File gchistOut: Read GC content histogram
#	- unpaired output? is it needed? Doesn't always generate
#		might only be for trimmomoatic...
# CHANGES:
# 	- Removed overwrite as is redundant
# 	- Can't find how to set naming convention for unpaired out
# 		will use sub to change name
###############################################################################
task reformat_pe_task {
	Int PER_minutes
	Int PER_threads
	Int PER_mem
	File forwardReads
	File reverseReads
	String outputPrefix
	String suffix

	command {
		module load BBMap;

		echo "Reformting ${forwardReads} and ${reverseReads} .";
		reformat.sh in=${forwardReads} in2=${reverseReads} out1=${outputPrefix}_R1.trimmed.fq.gz out2=${outputPrefix}_R2.trimmed.fq.gz qhist=${outputPrefix}.${suffix}_qhist.txt aqhist=${outputPrefix}.${suffix}_aqhist.txt bhist=${outputPrefix}.${suffix}_bhist.txt lhist=${outputPrefix}.${suffix}_lhist.txt gchist=${outputPrefix}.${suffix}_gchist.txt;
		echo ".. Done";
	}
	output {
		Array[File] outFqFiles = ["${outputPrefix}_R1.trimmed.fq.gz", "${outputPrefix}_R2.trimmed.fq.gz"]
		Array[File] outHistArray = ["${outputPrefix}.${suffix}_aqhist.txt","${outputPrefix}.${suffix}_bhist.txt","${outputPrefix}.${suffix}_gchist.txt","${outputPrefix}.${suffix}_lhist.txt","${outputPrefix}.${suffix}_qhist.txt"]
	}
	runtime {
                runtime_minutes: '${PER_minutes}'
                cpus: '${PER_threads}'
                mem: '${PER_mem}'
        }
}

###############################################################################
## FASTQC analysis
## INPUT:
##       - paired end fastqc files
##	 - The reverse reads is optional. This allows this task to be used for
##	   single and paired end reads
## OUTPUT:
##       - MAP of best db reference, index and dictionary
## CHANGES:
##       - None as of yet
## POTENTIAL CHANGES:
##
## ISSUES:
################################################################################

task fastqc_task {
        Int FQC_threads
        Int FQC_minutes
        Int FQC_mem
        File forwardReads
        File? reverseReads

        command {
                module load fastqc
                fastqc -t '${FQC_threads}' '${forwardReads}' '${reverseReads}' -o $PWD 
        }
        runtime {
                runtime_minutes: '${FQC_minutes}'
                cpus: '${FQC_threads}'
                mem: '${FQC_mem}'
        }
        output {
                Array[File] fastqcArray = glob("*.zip")
        }
}

###############################################################################
## MULTIQC analysis
## INPUT:
##       - fastqc output directory
## OUTPUT:
##       - Array[File] consisting of html and fastqc output
## CHANGES:
##       - None as of yet
## POTENTIAL CHANGES:
##
## ISSUES:
################################################################################

task multiqc_task {
        Array[File] fastqcArray
        Int MQC_threads
        Int MQC_minutes
        Int MQC_mem
	String outputPrefix

        command {
                module load MultiQC
		
		for file in ${sep=' ' fastqcArray}; do
			cp $file .
		done 
		
		multiqc -n ${outputPrefix}.mqc_report.html .
        }
        runtime {
                runtime_minutes: '${MQC_minutes}'
                cpus: '${MQC_threads}'
                mem: '${MQC_mem}'
        }
        output {
                File multiqcArray = "${outputPrefix}.mqc_report.html"
        }

}
