Bootstrap: docker
From: ubuntu:18.04

%post
    #update apt-get and install base programs
    apt-get -y update
<<<<<<< HEAD
    apt-get -y install zip
    apt-get -y install wget
    apt-get -y install perl
    apt-get -y install bwa=0.7.17-1ubuntu0.1
    apt-get -y install default-jdk=2:1.11-68ubuntu1~18.04.1
    apt-get -y install python3.8
    apt-get -y install rsync
    apt-get -y install tar
    apt-get -y install python3-pip
    apt-get -y install curl
    apt-get -y install git
=======
    apt-get -y install zip=3.0-11build1
    apt-get -y install wget=1.19.4-1ubuntu2.2
    apt-get -y install perl=5.26.1-6ubuntu0.5
    apt-get -y install bwa=0.7.17-1ubuntu0.1
    apt-get -y install default-jdk=2:1.11-68ubuntu1~18.04.1
    apt-get -y install python3.8=3.8.0-3~18.04
    apt-get -y install rsync=3.1.2-2.1ubuntu1.1
    apt-get -y install tar=1.29b-2ubuntu0.1
    apt-get -y install python3-pip=9.0.1-2.3~ubuntu1.18.04.4
    apt-get -y install curl=7.58.0-2ubuntu3.10
    apt-get -y install git=1:2.17.1-1ubuntu0.7
>>>>>>> bob
    apt-get -y install pkg-config=0.29.1-0ubuntu2
    apt-get -y install ncbi-blast+=2.6.0-1
    apt-get -y install automake
    apt-get -y install zlib1g-dev
    apt-get -y install libxml2-dev
    apt-get -y install libdb5.3-dev
    apt-get -y install unzip
    perl -MCPAN -e 'my $c = "CPAN::HandleConfig"; $c->load(doit => 1, autoconfig => 1); $c->edit(prerequisites_policy => "follow"); $c->edit(build_requires_install_policy => "yes"); $c->commit'
    cpan install XML::LibXML
    cpan install XML::DOM
    apt-get -y install bioperl=1.7.2-2
    apt-get -y install cmake
    apt-get -y install -y libbz2-dev=1.0.6-8.1ubuntu0.2

    # Python packages
    pip3 install multiqc==1.9
    pip3 install cython==0.29.21
    pip3 install cutadapt==2.10
    pip3 install biopython==1.78
    pip3 install pandas==1.1.4

    #make directories
    mkdir /local_build/
    mkdir /local_build/bin/
    mkdir /local_build/fastqc/
    mkdir /local_build/deconseq/
    mkdir /local_build/idba/
    mkdir /local_build/spades/
    mkdir /local_build/flash/
    mkdir /local_build/metaspades/
    mkdir /local_build/cutadapt/
    mkdir /local_build/trim_galore/
    mkdir /local_build/bowtie2/

    # Install hmmer
    wget http://eddylab.org/software/hmmer/hmmer-3.3.1.tar.gz \
    && tar -xzf hmmer-3.3.1.tar.gz \
    && cd hmmer-3.3.1 \
    && ./configure \
    && make \
    && make prefix=/local_build/ install

    #trim galore
    cd /local_build/trim_galore/ \
    && git clone https://github.com/FelixKrueger/TrimGalore.git . \
    && cp trim_galore /local_build/bin

    # pigz - parallel gzip
    wget https://zlib.net/pigz/pigz-2.4.tar.gz \
    && tar -xzf pigz-2.4.tar.gz \
    && cd pigz-2.4 \
    && make \
    && rsync pigz /local_build/bin/

    #bowtie2
    wget https://sourceforge.net/projects/bowtie-bio/files/bowtie2/2.4.1/bowtie2-2.4.1-linux-x86_64.zip -o bowtie2-2.4.1-linux-x86_64.zip --directory-prefix /local_build/bowtie2/ \
    && cd /local_build/bowtie2 \
    && unzip bowtie2-2.4.1-linux-x86_64.zip \
    && cd bowtie2-2.4.1-linux-x86_64/ \
    && cp bowtie2* /local_build/bin/

    #bbmap
    wget https://sourceforge.net/projects/bbmap/files/BBMap_38.86.tar.gz --directory-prefix /local_build/
    tar -xvf /local_build/BBMap_38.86.tar.gz -C /local_build/

    #install metaspades
    wget http://cab.spbu.ru/files/release3.14.1/SPAdes-3.14.1-Darwin.tar.gz -o SPAdes-3.14.1-Darwin.tar.gz  --directory-prefix /local_build/ \
    && cd /local_build/ \
    && tar -xzf SPAdes-3.14.1-Darwin.tar.gz

    #install idba
    git clone https://github.com/loneknightpy/idba.git /local_build/idba/ \
    && cd /local_build/idba \
    && sed -Ei 's/static const uint32_t kMaxShortSequence = 128;/static const uint32_t kMaxShortSequence = 256;/g' /local_build/idba/src/sequence/short_sequence.h \
    && sh ./build.sh \
    && rsync -av --exclude "*.*" ./bin/* /local_build/bin/
    ## Install metaHipMer, requires upcxx
    # UPCXX
    wget https://bitbucket.org/berkeleylab/upcxx/downloads/upcxx-2020.10.0.tar.gz \
    && tar -xf upcxx-2020.10.0.tar.gz \
    && cd upcxx-2020.10.0 \
    && ./configure --prefix=/local_build/bin && make && make install
    # MetaHipMer
    wget https://bitbucket.org/berkeleylab/mhm2/downloads/mhm2-2.0.0.tar.gz \
    && tar -xf mhm2-2.0.0.tar.gz \
    && cd mhm2-2.0.0 \
    && MHM2_INSTALL_PATH=/local_build/bin ./build.sh Release

    ## Install metaHipMer, requires upcxx
    # UPCXX
    wget https://bitbucket.org/berkeleylab/upcxx/downloads/upcxx-2020.10.0.tar.gz \
    && tar -xf upcxx-2020.10.0.tar.gz \
    && cd upcxx-2020.10.0 \
    && ./configure --prefix=/local_build/bin && make && make install
    # MetaHipMer
    wget https://bitbucket.org/berkeleylab/mhm2/downloads/mhm2-2.0.0.tar.gz \
    && tar -xf mhm2-2.0.0.tar.gz \
    && cd mhm2-2.0.0 \
    && MHM2_INSTALL_PATH=/local_build/bin ./build.sh Release

    #install deconseq
    wget https://sourceforge.net/projects/deconseq/files/standalone/deconseq-standalone-0.4.3.tar.gz --directory-prefix /local_build/ \
    && cd /local_build/ \
    && tar -xzf deconseq-standalone-0.4.3.tar.gz \
    && rsync -av ./deconseq-standalone-0.4.3/* /local_build/deconseq/

    #Install prodigal
    wget https://github.com/hyattpd/Prodigal/archive/v2.6.1.tar.gz \
    && tar -xzf v2.6.1.tar.gz \
    && cd Prodigal-2.6.1 \
    && make \
    && rsync prodigal /local_build/bin/

    #install diamond
    wget http://github.com/bbuchfink/diamond/releases/download/v2.0.2/diamond-linux64.tar.gz \
    && tar -xzf diamond-linux64.tar.gz \
    && mv diamond /local_build/bin/

    #install Flash
    wget http://ccb.jhu.edu/software/FLASH/FLASH-1.2.11.tar.gz --directory-prefix /local_build/flash/ \
    && cd /local_build/flash/ \
    && tar -xzf FLASH-1.2.11.tar.gz \
    && cd FLASH-1.2.11 \
    && make \
    && cp /local_build/flash/FLASH-1.2.11/flash /local_build/bin/

    #megahit
    wget https://github.com/voutcn/megahit/releases/download/v1.2.9/MEGAHIT-1.2.9-Linux-x86_64-static.tar.gz \
    && tar -xzf MEGAHIT-1.2.9-Linux-x86_64-static.tar.gz \
    && rsync -av ./MEGAHIT-1.2.9-Linux-x86_64-static/bin/* /local_build/bin/

    #install samtools
    wget https://github.com/samtools/samtools/releases/download/1.10/samtools-1.10.tar.bz2 \
    && tar -xjf samtools-1.10.tar.bz2 \
    && cd samtools-1.10 \
    && ./configure \
    && make \
    && make prefix=/local_build/ install

    #Install programs manually
    wget http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.9.zip --directory-prefix /local_build/
    chmod 0775 /local_build/fastqc_v0.11.9.zip
    unzip /local_build/fastqc_v0.11.9.zip -d /local_build/fastqc/
    chmod -R 0775 /local_build/fastqc/
    ln -s /local_build/fastqc/FastQC/fastqc /local_build/bin/fastqc

    #trimmomatic
    wget http://www.usadellab.org/cms/uploads/supplementary/Trimmomatic/Trimmomatic-0.39.zip --directory-prefix /local_build/
    unzip /local_build/Trimmomatic-0.39.zip
    rsync ./Trimmomatic-0.39/* /local_build/bin/

    ### create shells to run java jar files
    echo "java -jar /local_build/bin/trimmomatic-0.39.jar" > /local_build/bin/trimmomatic
    chmod 0775 /local_build/bin/trimmomatic-0.39.jar

%environment
    export LC_ALL=C.UTF-8
    export LANG=C.UTF-8
    PATH=$PATH:/local_build/bbmap/
    PATH=$PATH:/local_build/bin/
    PATH=$PATH:/local_build/SPAdes-3.14.1-Darwin/bin
    PATH=$PATH:/local_build/bin/bin

%labels
    AUTHOR Bobbie Shaban, Mar Quiroga

%runscript
    exec "$@"